apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: observatorium-thanos-compact-telemeter
objects:
- apiVersion: policy/v1
  kind: PodDisruptionBudget
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-thanos-compact-telemeter
    namespace: rhobs
  spec:
    maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
        observatorium/tenant: telemeter
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer-name: letsencrypt-prod-http
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-thanos-compact-telemeter
    namespace: rhobs
  spec:
    host: ""
    port:
      targetPort: https
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt
    to:
      kind: Service
      name: observatorium-thanos-compact-telemeter
      weight: null
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: compact-tls-telemeter
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-thanos-compact-telemeter
    namespace: rhobs
  spec:
    ports:
    - name: http
      port: 10902
      protocol: TCP
      targetPort: 10902
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.application: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"observatorium-thanos-compact-telemeter"}}'
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-thanos-compact-telemeter
    namespace: rhobs
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: v0.32.5
      observatorium/tenant: telemeter
    name: observatorium-thanos-compact-telemeter
    namespace: rhobs
  spec:
    replicas: ${{COMPACTOR_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
        observatorium/tenant: telemeter
    serviceName: observatorium-thanos-compact-telemeter
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: v0.32.5
          observatorium/tenant: telemeter
        namespace: rhobs
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-compact
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - compact
          - --compact.concurrency=1
          - --data-dir=/var/thanos/compactor
          - --deduplication.replica-label=replica
          - --delete-delay=24h0m0s
          - --downsample.concurrency=1
          - --log.format=logfmt
          - --log.level=${COMPACTOR_LOG_LEVEL}
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --wait
          - --debug.max-compaction-level=3
          env:
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: telemeter-tenant-s3
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: telemeter-tenant-s3
          - name: OBJ_STORE_BUCKET
            valueFrom:
              secretKeyRef:
                key: bucket
                name: telemeter-tenant-s3
          - name: OBJ_STORE_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: telemeter-tenant-s3
          - name: OBJ_STORE_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: endpoint
                name: telemeter-tenant-s3
          - name: OBJSTORE_CONFIG
            value: |
              type: S3
              config:
                  bucket: $(OBJ_STORE_BUCKET)
                  endpoint: $(OBJ_STORE_ENDPOINT)
                  region: $(OBJ_STORE_REGION)
          image: quay.io/thanos/thanos:v0.32.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 10902
            periodSeconds: 30
          name: thanos
          ports:
          - containerPort: 10902
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
            periodSeconds: 5
          resources:
            limits:
              memory: ${COMPACTOR_MEMORY_LIMIT}
            requests:
              cpu: ${COMPACTOR_CPU_REQUEST}
              memory: ${COMPACTOR_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/compactor
            name: data
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:10902
          - -openshift-service-account=observatorium-thanos-compact-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "rhobs",
            "namespace": "rhobs"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
            "name": "rhobs", "namespace": "rhobs"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret=${OAUTH_PROXY_COOKIE_SECRET}
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: quay.io/openshift/origin-oauth-proxy:4.15
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/tls/private
            name: tls
            readOnly: true
        nodeSelector:
          kubernetes.io/os: linux
        serviceAccountName: observatorium-thanos-compact-telemeter
        terminationGracePeriodSeconds: 120
        volumes:
        - name: tls
          secret:
            secretName: compact-tls-telemeter
    updateStrategy: {}
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: v0.32.5
          observatorium/tenant: telemeter
        name: data
        namespace: rhobs
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: gp2
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
      prometheus: app-sre
    name: rhobs-observatorium-thanos-compact-telemeter
    namespace: openshift-customer-monitoring
  spec:
    endpoints:
    - port: http
      relabelings:
      - action: replace
        separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - rhobs
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
        observatorium/tenant: telemeter
parameters:
- name: COMPACTOR_CPU_REQUEST
  value: 200m
- name: COMPACTOR_LOG_LEVEL
  value: warn
- name: COMPACTOR_MEMORY_LIMIT
  value: 5Gi
- name: COMPACTOR_MEMORY_REQUEST
  value: 1Gi
- name: COMPACTOR_REPLICAS
  value: "1"
- from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: OAUTH_PROXY_COOKIE_SECRET
