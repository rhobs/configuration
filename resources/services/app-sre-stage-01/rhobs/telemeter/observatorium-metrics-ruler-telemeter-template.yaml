apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: observatorium-thanos-rule-telemeter
objects:
- apiVersion: v1
  data:
    observatorium.yaml: |
      groups:
          - interval: 4m
            name: telemeter-telemeter.rules
            rules:
              - expr: |
                  count_over_time(vector(1)[1h:5m])
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: steps:count1h
              - expr: |
                  count by (name,reason) (cluster_operator_conditions{condition="Degraded"} == 1)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: name_reason:cluster_operator_degraded:count
              - expr: |
                  count by (name,reason) (cluster_operator_conditions{condition="Available"} == 0)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: name_reason:cluster_operator_unavailable:count
              - expr: |
                  sort_desc(max by (_id,code) (code:apiserver_request_count:rate:sum{code=~"(4|5)\\d\\d"}) > 0.5)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_code:apiserver_request_error_rate_sum:max
              - expr: |
                  bottomk by (_id) (1, max by (_id, version) (0 * cluster_version{type="failure"}) or max by (_id, version) (1 + 0 * cluster_version{type="current"}))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_version:cluster_available
              - expr: |
                  topk by (_id) (1, max by (_id, managed, ebs_account, internal) (label_replace(label_replace((ocm_subscription{support=~"Standard|Premium|Layered"} * 0 + 1) or ocm_subscription * 0, "internal", "true", "email_domain", "redhat.com|(.*\\.|^)ibm.com"), "managed", "", "managed", "false")) + on(_id) group_left(version) (topk by (_id) (1, id_version*0)) + on(_id) group_left(install_type) (topk by (_id) (1, id_install_type*0)) + on(_id) group_left(host_type) (topk by (_id) (1, id_primary_host_type*0)) + on(_id) group_left(provider) (topk by (_id) (1, id_provider*0)))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_version_ebs_account_internal:cluster_subscribed
              - expr: |
                  0 * (max by (_id,host_type) (topk by (_id) (1, label_replace(label_replace(label_replace(label_replace(label_replace(label_replace(cluster:virt_platform_nodes:sum, "host_type", "$1", "type", "(aws|ibm_.*|ovirt|none|rhev|gcp|openstack|hyperv|vmware|nutanix.*)"), "host_type", "virt-unknown", "host_type", ""), "host_type", "kvm-unknown", "type", "kvm"), "host_type", "xen-unknown", "type", "xen.*"), "host_type", "metal", "host_type", "none"), "host_type", "ibm-$1", "host_type", "ibm[_-](power|systemz).*"))) or on(_id) label_replace(max by (_id) (cluster_version{type="current"}), "host_type", "", "host_type", ""))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_primary_host_type
              - expr: |
                  0 * topk by (_id) (1, group by (_id, provider) (label_replace(cluster_infrastructure_provider, "provider", "$1", "type", "(.*)")) or on(_id) label_replace(group by (_id) (cluster_version{type="current"}), "provider", "unknown", "provider", ""))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_provider
              - expr: |
                  0 * (max by (_id,version) (topk by (_id) (1, cluster_version{type="current"})) or on(_id) label_replace(max by (_id) (cluster:node_instance_type_count:sum*0), "version", "", "unknown", ""))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_version
              - expr: |
                  (
                    count by (_id, install_type) (
                      label_replace(
                        label_replace(
                          label_replace(
                            label_replace(
                              label_replace(
                                label_replace(
                                  label_replace(
                                    topk by (_id) (1, cluster_installer), "install_type", "upi", "type", "other"
                                  ), "install_type", "ipi", "type", "openshift-install"
                                ), "install_type", "hive", "invoker", "hive"
                              ), "install_type", "assisted-installer", "invoker", "assisted-installer"
                            ), "install_type", "infrastructure-operator", "invoker", "assisted-installer-operator"
                          ), "install_type", "agent-installer", "invoker", "agent-installer"
                        ), "install_type", "hypershift", "invoker", "hypershift"
                      )
                    ) or on(_id) (
                      label_replace(
                        count by (_id) (
                          cluster:virt_platform_nodes:sum
                        ), "install_type", "unknown", "install_type", ""
                      )
                    ) * 0
                  ) * 0
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_install_type
              - expr: |
                  0 * (max by (_id,cloudpak_type) (topk by (_id) (1, count by (_id,cloudpak_type) (label_replace(subscription_sync_total{installed=~"ibm-((licensing|common-service)-operator).*"}, "cloudpak_type", "unknown", "", ".*")))))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_cloudpak_type
              - expr: |
                  topk by(_id) (1,
                    (label_replace(7+0*count by (_id) (cluster:usage:resources:sum{resource="netnamespaces.network.openshift.io"}), "network_type", "OpenshiftSDN", "", "") > 0) or
                    (label_replace(6+0*count by (_id) (cluster:usage:resources:sum{resource="clusterinformations.crd.projectcalico.org"}), "network_type", "Calico", "", "") > 0) or
                    (label_replace(5+0*count by (_id) (cluster:usage:resources:sum{resource="acicontainersoperators.aci.ctrl"}), "network_type", "ACI", "", "") > 0) or
                    (label_replace(4+0*count by (_id) (cluster:usage:resources:sum{resource="kuryrnetworks.openstack.org"}), "network_type", "Kuryr", "", "") > 0) or
                    (label_replace(3+0*count by (_id) (cluster:usage:resources:sum{resource="ciliumendpoints.cilium.io"}), "network_type", "Cilium", "", "") > 0) or
                    (label_replace(2+0*count by (_id) (cluster:usage:resources:sum{resource="ncpconfigs.nsx.vmware.com"}), "network_type", "VMWareNSX", "", "") > 0) or
                    (label_replace(1+0*count by (_id) (cluster:usage:resources:sum{resource="egressips.k8s.ovn.org"}), "network_type", "OVNKube", "", "")) or
                    (label_replace(0+0*max by (_id) (cluster:node_instance_type_count:sum*0), "network_type", "unknown", "", ""))
                  )
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: id_network_type
              - expr: |
                  0 * topk by (ebs_account) (1, max by (ebs_account,account_type,internal,email_domain) (label_replace(label_replace(label_replace(ocm_subscription{email_domain="redhat.com"}*0+5, "class", "Internal", "class", ".*") or label_replace(ocm_subscription{class!="Customer",email_domain=~"(.*\\.|^)ibm.com"}*0+4, "class", "Internal", "class", ".*") or (ocm_subscription{class="Customer"}*0+3) or (ocm_subscription{class="Partner"}*0+2) or (ocm_subscription{class="Evaluation"}*0+1) or label_replace(ocm_subscription{class!~"Evaluation|Customer|Partner"}*0+0, "class", "", "class", ".*"), "account_type", "$1", "class", "(.+)"), "internal", "true", "email_domain", "redhat.com|(.*\\.|^)ibm.com") ))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: ebs_account_account_type_email_domain_internal
              - expr: |
                  topk(500, sum (acm_managed_cluster_info) by (managed_cluster_id, cloud, created_via, endpoint, instance, job, namespace, pod, service, vendor, version))
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: acm_top500_mcs:acm_managed_cluster_info
              - expr: |
                  max by(_id) (sum_over_time(cluster:usage:workload:capacity_physical_cpu_cores:max:5m[1h:5m])) / scalar(steps:count1h)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: cluster:usage:workload:capacity_physical_cpu_hours
              - expr: |
                  max by(_id) (count_over_time(cluster:usage:workload:capacity_physical_cpu_cores:max:5m[1h:5m])) / scalar(steps:count1h)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: cluster:usage:workload:capacity_physical_instance_hours
              - expr: |
                  sum by(_id) (sum_over_time(cluster:capacity_cpu_cores:sum{label_node_role_kubernetes_io = ''}[1h:5m])) / scalar(steps:count1h)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: cluster:usage:workload:capacity_virtual_cpu_hours
              - expr: |
                  group by(_id, tenant_id) (cluster:capacity_cpu_cores:sum{label_node_openshift_io_os_id="rhcos"}) * 0
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: cluster:cpu_capacity_cores:_id
              - expr: |
                  # worker amd64
                  (sum by (_id, tenant_id) (cluster:capacity_cpu_cores:sum{label_node_openshift_io_os_id="rhcos",label_node_role_kubernetes_io!="master",label_node_role_kubernetes_io!="infra",label_kubernetes_io_arch="amd64"}) / 2.0 or cluster:cpu_capacity_cores:_id) +
                  # worker non-amd64
                  (sum by (_id, tenant_id) (cluster:capacity_cpu_cores:sum{label_node_openshift_io_os_id="rhcos",label_node_role_kubernetes_io!="master",label_node_role_kubernetes_io!="infra",label_kubernetes_io_arch!="amd64"}) or cluster:cpu_capacity_cores:_id) +
                  # schedulable control plane amd64
                  (sum by (_id, tenant_id) (cluster:capacity_cpu_cores:sum{label_node_openshift_io_os_id="rhcos",label_node_role_kubernetes_io="master",label_kubernetes_io_arch="amd64"}) * on(_id, tenant_id) group by(_id, tenant_id) (cluster_master_schedulable == 1) / 2.0 or cluster:cpu_capacity_cores:_id) +
                  # schedulable control plane non-amd64
                  (sum by (_id, tenant_id) (cluster:capacity_cpu_cores:sum{label_node_openshift_io_os_id="rhcos",label_node_role_kubernetes_io="master",label_kubernetes_io_arch!="amd64"}) * on(_id, tenant_id) group by(_id, tenant_id) (cluster_master_schedulable == 1) or cluster:cpu_capacity_cores:_id)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: cluster:capacity_effective_cpu_cores
              - expr: |
                  # self managed OpenShift cluster
                  max by (_id, managed_cluster_id) (acm_managed_cluster_info{product="OpenShift"}) * on(managed_cluster_id) group_left() (
                      # On one side, the acm_managed_cluster_info metric has the managed_cluster_id label identifiying the managed cluster and the _id label identifying the hub cluster.
                      # On the other side, the cluster:capacity_effective_cpu_cores metric has the _id label which identifying the managed cluster.
                      # To join the 2 metrics, we need to add a managed_cluster_id label with the same value as _id to the cluster:capacity_effective_cpu_cores metric.
                      label_replace(
                        max by(_id) (cluster:capacity_effective_cpu_cores), "managed_cluster_id", "$1", "_id", "(.*)"
                      )
                    ) * 2 or
                  # managed OpenShift cluster and non-OpenShift clusters
                  max by (_id, managed_cluster_id) (acm_managed_cluster_worker_cores:max)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: acm_capacity_effective_cpu_cores
              - expr: |
                  sum by (_id) (acm_capacity_effective_cpu_cores)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: acm_capacity_effective_cpu_cores:sum
              - expr: |
                  max by(_id) (sum_over_time(hostedcluster:hypershift_cluster_vcpus:max[1h:5m])) / scalar(steps:count1h)
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: hostedcluster:hypershift_cluster_vcpus:vcpu_hours
              - expr: |
                  hostedcluster:hypershift_cluster_vcpus:vcpu_hours or on (_id) cluster:usage:workload:capacity_virtual_cpu_hours
                labels:
                  tenant_id: FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
                record: rosa:cluster:vcpu_hours
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-rules
    namespace: rhobs
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer-name: letsencrypt-prod-http
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: v0.32.5
      observatorium/tenant: telemeter
    name: observatorium-thanos-rule-telemeter
    namespace: rhobs
  spec:
    host: ""
    port:
      targetPort: https
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt
    to:
      kind: Service
      name: observatorium-thanos-rule-telemeter
      weight: null
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: ruler-tls
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-thanos-rule-telemeter
    namespace: rhobs
  spec:
    ports:
    - name: http
      port: 10902
      protocol: TCP
      targetPort: 10902
    - name: grpc
      port: 10901
      protocol: TCP
      targetPort: 10901
    - name: internal
      port: 8083
      protocol: TCP
      targetPort: 8083
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.application: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"observatorium-thanos-rule-telemeter"}}'
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
    name: observatorium-thanos-rule-telemeter
    namespace: rhobs
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: v0.32.5
      observatorium/tenant: telemeter
    name: observatorium-thanos-rule-telemeter
    namespace: rhobs
  spec:
    replicas: ${{RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
        observatorium/tenant: telemeter
    serviceName: observatorium-thanos-rule-telemeter
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: v0.32.5
          observatorium/tenant: telemeter
        namespace: rhobs
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-rule
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - rule
          - --alert.label-drop=rule_replica
          - --alertmanagers.url=http://observatorium-alertmanager.rhobs.svc.cluster.local:9093
          - --data-dir=/var/thanos/ruler
          - --label=rule_replica="$(NAME)"
          - --log.format=logfmt
          - --log.level=${RULER_LOG_LEVEL}
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --query=http://observatorium-thanos-query-rule.rhobs.svc.cluster.local:10902
          - --rule-file=/etc/thanos/rules/synced-rules/observatorium.yaml
          - --rule-file=/etc/thanos/rules/telemeter-rules/observatorium.yaml
          - |
            --tracing.config=type: JAEGER
            config:
              service_name: thanos-rule-telemeter
              sampler_type: ratelimiting
              sampler_param: 2
          - --tsdb.retention=48h0m0s
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: telemeter-tenant-s3
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: telemeter-tenant-s3
          - name: OBJ_STORE_BUCKET
            valueFrom:
              secretKeyRef:
                key: bucket
                name: telemeter-tenant-s3
          - name: OBJ_STORE_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: telemeter-tenant-s3
          - name: OBJ_STORE_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: endpoint
                name: telemeter-tenant-s3
          - name: OBJSTORE_CONFIG
            value: |
              type: S3
              config:
                  bucket: $(OBJ_STORE_BUCKET)
                  endpoint: $(OBJ_STORE_ENDPOINT)
                  region: $(OBJ_STORE_REGION)
          image: quay.io/thanos/thanos:v0.32.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
            periodSeconds: 30
            timeoutSeconds: 1
          name: thanos
          ports:
          - containerPort: 10902
            name: http
            protocol: TCP
          - containerPort: 10901
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
            periodSeconds: 5
          resources:
            limits:
              memory: ${RULER_MEMORY_LIMIT}
            requests:
              cpu: ${RULER_CPU_REQUEST}
              memory: ${RULER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/ruler
            name: data
          - mountPath: /etc/thanos/rules/synced-rules
            name: rule-syncer
            readOnly: true
          - mountPath: /etc/thanos/rules/telemeter-rules
            name: observatorium-rules
        - args:
          - -file=/etc/thanos-rule-syncer/observatorium.yaml
          - -interval=60
          - -rules-backend-url=http://observatorium-rules-objstore.rhobs.svc.cluster.local:10902
          - -thanos-rule-url=127.0.0.1:10902
          image: quay.io/observatorium/thanos-rule-syncer:main-2022-09-14-338f9ec
          name: observatorium-rules-syncer
          ports:
          - containerPort: 8083
            name: internal
            protocol: TCP
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/thanos-rule-syncer
            name: rule-syncer
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:10902
          - -openshift-service-account=observatorium-thanos-rule-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "rhobs",
            "namespace": "rhobs"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
            "name": "rhobs", "namespace": "rhobs"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret=${OAUTH_PROXY_COOKIE_SECRET}
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: quay.io/openshift/origin-oauth-proxy:4.15
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/tls/private
            name: tls
            readOnly: true
        - args:
          - --reporter.grpc.host-port=dns:///otel-trace-writer-collector-headless.observatorium-tools.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: quay.io/app-sre/jaegertracing-jaeger-agent:1.22.0
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
            protocol: TCP
          - containerPort: 6831
            name: jaeger-thrift
            protocol: TCP
          - containerPort: 14271
            name: metrics
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 14271
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - -volume-dir=/etc/thanos-rule-syncer
          - -webhook-url=http://localhost:10902/-/reload
          image: quay.io/openshift/origin-configmap-reloader:4.5.0
          name: configmap-reloader
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/thanos/rules/observatorium-rules
            name: observatorium-rules
        nodeSelector:
          kubernetes.io/os: linux
        serviceAccountName: observatorium-thanos-rule-telemeter
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            name: observatorium-rules
          name: observatorium-rules
        - emptyDir: {}
          name: rule-syncer
        - name: tls
          secret:
            secretName: ruler-tls
    updateStrategy: {}
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: v0.32.5
          observatorium/tenant: telemeter
        name: data
        namespace: rhobs
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: gp2
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      observatorium/tenant: telemeter
      prometheus: app-sre
    name: rhobs-observatorium-thanos-rule-telemeter
    namespace: openshift-customer-monitoring
  spec:
    endpoints:
    - port: http
      relabelings:
      - action: replace
        separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    - port: internal
      relabelings:
      - action: replace
        separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - rhobs
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
        observatorium/tenant: telemeter
parameters:
- from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: OAUTH_PROXY_COOKIE_SECRET
- name: RULER_CPU_REQUEST
  value: 100m
- name: RULER_LOG_LEVEL
  value: warn
- name: RULER_MEMORY_LIMIT
  value: 1Gi
- name: RULER_MEMORY_REQUEST
  value: 256Mi
- name: RULER_REPLICAS
  value: "1"
