---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: minio
  name: minio
  namespace: rhobs-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: rhobs-production
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
    spec:
      containers:
        - command:
            - /bin/sh
            - -c
            - |
              mkdir -p /storage/thanos && \
              minio server /storage
          env:
            - name: MINIO_ACCESS_KEY
              value: 'thanos'
            - name: MINIO_SECRET_KEY
              value: 'thanos-secret'
          image: minio/minio
          name: minio
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /storage
              name: storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: rhobs-production
spec:
  ports:
    - port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app.kubernetes.io/name: minio
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-test
  namespace: rhobs-production
stringData:
  endpoint: 'http://minio.rhobs-production.svc:9000'
  bucket: 'thanos'
  access_key_id: 'thanos'
  access_key_secret: 'thanos-secret'
type: Opaque

---
apiVersion: monitoring.thanos.io/v1alpha1
kind: ThanosQuery
metadata:
  name: rhobs
  namespace: rhobs-production
spec:
  baseImage: quay.io/thanos/thanos
  customStoreLabelSelector:
    matchLabels:
      app.kubernetes.io/part-of: thanos
      operator.thanos.io/store-api: "true"
  imagePullPolicy: IfNotPresent
  replicaLabels:
    - prometheus_replica
    - replica
    - rule_replica
  replicas: 1
  version: v0.38.0
status: {}
---
apiVersion: monitoring.thanos.io/v1alpha1
kind: ThanosReceive
metadata:
  name: rhobs
  namespace: rhobs-production
spec:
  ingesterSpec:
    defaultObjectStorageConfig:
      key: thanos.yaml
      name: thanos-objectstorage
      optional: false
    hashrings:
      - asyncForwardWorkerCount: 5
        baseImage: quay.io/thanos/thanos
        externalLabels:
          replica: $(POD_NAME)
        imagePullPolicy: IfNotPresent
        name: default
        objectStorageConfig:
          key: thanos.yaml
          name: thanos-object-storage
        replicas: 1
        storageSize: 1Gi
        storeLimitsOptions: {}
        tsdbConfig:
          retention: 2h
        version: v0.38.0
  routerSpec:
    baseImage: quay.io/thanos/thanos
    externalLabels:
      receive: "true"
    imagePullPolicy: IfNotPresent
    logFormat: logfmt
    logLevel: info
    replicas: 1
    replicationFactor: 1
    version: v0.38.0
status: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: thanos-object-storage
  namespace: rhobs-production
stringData:
  thanos.yaml: |-
    type: S3
    config:
      bucket: thanos
      access_key: thanos
      secret_key: thanos-secret
      endpoint: minio.rhobs-production.svc:9000
      insecure: true
type: Opaque
